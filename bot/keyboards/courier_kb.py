import pprint

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from bot.keyboards.base_keyboards import BaseKeyboard
from bot.utils.buttons import BUTTONS
from bot.utils.requests_to_api import req_to_api


class CourierKeyboard(BaseKeyboard):

    def routes_menu(self, route_link: str) -> InlineKeyboardMarkup:
        """–ö–ø–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ —Å –∫–∞—Ä—Ç–æ–π –∏ —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text='–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞',
                                 callback_data=f'points_route')
        )
        builder.row(
            InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞',
                                 callback_data=f'map_route',
                                 url=route_link)
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def points_btn(self, routes: dict) -> InlineKeyboardMarkup:
        """–ö–ø–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""

        builder = InlineKeyboardBuilder()
        orders = routes.get('orders')

        for order in orders:
            order_id = order.get('order_id')
            status_code, order = await req_to_api(
                method='get',
                url=f'orders/{order_id}',
            )

            order_address = order.get('address_data', {}).get('address')
            order_comment = order.get('address_data', {}).get('comment') if order.get('address_data', {}).get('comment') else ' '
            status = order.get('status_data', {}).get('status_name')
            if status == '–ø–µ—Ä–µ–¥–∞–Ω–∞ –∫—É—Ä—å–µ—Ä—É':
                builder.row(
                    InlineKeyboardButton(text=f"‚è≥ {order_address} {order_comment}",
                                         callback_data=f'point_{order_id}')
                )
            elif status == '–æ—Ç–º–µ–Ω–µ–Ω–∞':
                builder.row(
                    InlineKeyboardButton(text=f"üî¥ {order_address} {order_comment}",
                                         callback_data=f'point_{order_id}')
                )

            elif status == '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞':
                builder.row(
                    InlineKeyboardButton(text=f"üü¢ {order_address} {order_comment}",
                                         callback_data=f'point_{order_id}')
                )
            elif status == '–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞':
                builder.row(
                    InlineKeyboardButton(text=f"üí∏ {order_address} {order_comment}",
                                         callback_data=f'point_{order_id}')
                )

            else:
                builder.row(
                    InlineKeyboardButton(text=f"{order_address} {order_comment}",
                                         callback_data=f'point_{order_id}')
                )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def points_menu_btn(self, order: dict, point_id: str) -> InlineKeyboardMarkup:
        """–û—Ç–º–µ—Ç–∫–∞ —Ç–æ—á–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞/–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"""

        builder = InlineKeyboardBuilder()
        status = order.get('status_data', {}).get('status_name')
        container_type = order.get('box_data', {}).get('box_name') if order.get('box_data') is not None else None
        container_count = order.get('box_count') if order.get('box_count') is not None else None

        builder.add(
            InlineKeyboardButton(text='–¢–∏–ø',
                                 callback_data=f'container_type_{point_id}')
        )
        builder.add(
            InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                 callback_data=f'container_count_{point_id}')
        )

        if status != '–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞' and container_type and container_count:
            builder.row(
                InlineKeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∞–Ω',
                                     callback_data=f'finished_{point_id}')
            )
            if status != '–æ—Ç–º–µ–Ω–µ–Ω–∞':
                builder.row(
                    InlineKeyboardButton(text='–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                                         callback_data=f'not_finished_{point_id}')
                )

        builder.row(
            InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                                 callback_data=f'write_courier_comment_{point_id}')
        )

        builder.row(
            InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫',
                                 callback_data=f'back_order_list')
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def back_btn(self) -> ReplyKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞"""

        builder = ReplyKeyboardBuilder()

        builder.row(
            KeyboardButton(text=BUTTONS['BACK_ROUTE'])
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def choose_box_type(self, box_types: list[dict], order_id: str) -> InlineKeyboardMarkup:

        builder = InlineKeyboardBuilder()

        for box in box_types:
            builder.add(
                InlineKeyboardButton(
                    text=box.get('box_name'),
                    callback_data=f'box_id_{box.get("id")}'
                )
            )

        builder.adjust(2)

        builder.row(
            InlineKeyboardButton(
                text='–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                callback_data=f'cancel_change_{order_id}'
            )
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def choose_box_count(self, order_id: str) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        for number in range(1, 9):
            builder.add(
                InlineKeyboardButton(
                    text=str(number),
                    callback_data=f'box_count_{number}'
                )
            )

        builder.adjust(4)
        builder.row(
            InlineKeyboardButton(
                text='–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                callback_data=f'cancel_change_{order_id}'
            )
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def yes_or_no_btn(self, order_id: str) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(text='–î–∞',
                                 callback_data=f'courier_yes_{order_id}')
        )
        builder.add(
            InlineKeyboardButton(text='–ù–µ—Ç',
                                 callback_data=f'courier_no_{order_id}')
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )


