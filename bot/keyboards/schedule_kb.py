from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from bot.keyboards.base_keyboards import BaseKeyboard
from bot.utils.buttons import BUTTONS


class ScheduleKeyboard(BaseKeyboard):

    def change_btn(self, address_id: str) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ '–∏–∑–º–µ–Ω–∏—Ç—å' –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text='–∏–∑–º–µ–Ω–∏—Ç—å',
                                 callback_data=f'change_period_{address_id}')
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def change_schedule_btn(self) -> ReplyKeyboardMarkup:
        """–ö–ø–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤—ã–∑–æ–≤–∞"""

        builder = ReplyKeyboardBuilder()
        builder.row(
            KeyboardButton(text='–ü–æ –∑–∞–ø—Ä–æ—Å—É'),
            KeyboardButton(text='–ü–æ –¥–Ω—è–º')
        )

        builder.row(
            KeyboardButton(text=BUTTONS['BACK_SCHEDULE_ADDRESS_LIST']),
        )
        builder.row(
            KeyboardButton(text=BUTTONS['MENU'])
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def back_schedule_address(self) -> ReplyKeyboardMarkup:

        builder = ReplyKeyboardBuilder()

        builder.row(
            KeyboardButton(text=BUTTONS['BACK_SCHEDULE_ADDRESS']),
        )
        builder.row(
            KeyboardButton(text=BUTTONS['MENU'])
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def schedule_period_btn(self) -> ReplyKeyboardMarkup:
        """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

        builder = ReplyKeyboardBuilder()
        builder.row(
            KeyboardButton(text='–î–Ω–∏ –Ω–µ–¥–µ–ª–∏'),
            KeyboardButton(text='–î–Ω–∏ –º–µ—Å—è—Ü–∞')
        )

        builder.row(
            KeyboardButton(text=BUTTONS['BACK_SETTINGS']),
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def day_of_week_btn(self, work_days: list[dict], selected_day_of_week: list[str]) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""

        builder = InlineKeyboardBuilder()
        days = {
            'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
            'wednesday': '–°—Ä–µ–¥–∞',
            'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
            'saturday': '–°—É–±–±–æ—Ç–∞',
            'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
        unique_work_days = set([day.get('weekday') for day in work_days])

        for day in days:
            if day in selected_day_of_week:
                builder.row(
                    InlineKeyboardButton(
                        text=f'‚úÖ  {days[day]}',
                        callback_data=f'day_of_week_{day}'
                    )
                )

            else:
                if day in unique_work_days:
                    builder.row(
                        InlineKeyboardButton(
                            text=f'üü¢  {days[day]}',
                            callback_data=f'day_of_week_{day}'
                        )
                    )
                else:
                    builder.row(
                        InlineKeyboardButton(
                            text=f'üî¥ {days[day]}',
                            callback_data=f'error_day_of_week'
                        )
                    )

        builder.row(
            InlineKeyboardButton(
                text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                callback_data=f'save_day_of_week'
            )
        )

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    def day_of_month_btn(self, total_days: int, selected_day_of_month: list[str]) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞"""

        builder = InlineKeyboardBuilder()
        for day in range(1, total_days + 1):
            if str(day) in selected_day_of_month:
                builder.add(
                    InlineKeyboardButton(
                        text=f'‚úîÔ∏è {str(day)}',
                        callback_data=f'day_of_month_{day}'
                    )
                )
            else:
                builder.add(
                    InlineKeyboardButton(
                        text=str(day),
                        callback_data=f'day_of_month_{day}'
                    )
                )

        builder.row(
            InlineKeyboardButton(
                text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                callback_data=f'save_day_of_month'
            )
        )
        builder.adjust(4)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
