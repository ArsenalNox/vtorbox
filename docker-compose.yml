version: '3.4'

services:

  db:
    container_name: project_db
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}

    ports:
      - '${POSTGRES_PORT}'

    volumes:
      - ./postgres-data:/var/lib/postgresql/data

    networks:
      - common-net

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


  web:
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POTSGRES_HOST}

      - environment=dev
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1

      - SCHEDULER_HOST=project_scheduler
      - SCHEDULER_PORT=8081

    container_name: project_backend

    depends_on:
      db:
        condition: service_healthy

    build:
      context: .
      dockerfile: dockerfile

    ports:
      - "8000:8000"

    networks:
      - common-net


  bot:
    build:
      context: .
      dockerfile: bot/.dockerfile

    restart: always

    container_name: aiogram_bot
    command: sh -c "python3 -m bot.start_bot"
    env_file:
      - .env

    networks:
      - common-net

  scheduler:
    build:
      context: .
      dockerfile: scheduler/.dockerfile

    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}


    depends_on:
      - web

    container_name: project_scheduler
    command: sh -c "python3 scheduler/main.py"
    env_file:
      - .env

    networks:
      - common-net


networks:
  common-net: {}