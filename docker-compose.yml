version: '3.4'

services:
  db:
    container_name: project_db
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=my_app
      - PGPORT=5433

    ports:
      - '5433:5433'

    volumes:
      - ./postgres-data:/var/lib/postgresql/data

    networks:
      - common-net

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=my_app
      - PGPORT=5433

      - environment=dev
      - SECRET_KEY="09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=3600
      - Y_GEOCODER_KEY=37e2fe65-4dd4-40c5-9c4d-9a45a9f3587a

    container_name: project_backend

    depends_on:
      db:
        condition: service_healthy

    build:
      context: .
      dockerfile: dockerfile

    ports:
      - "8000:8000"

    networks:
      - common-net

  bot:
    build:
      context: .
      dockerfile: bot/.dockerfile

    container_name: aiogram_bot
    command: sh -c "python3 -m bot.start_bot"
    env_file:
      - .env

    depends_on:
      db:
        condition: service_healthy

    networks:
      - common-net

networks:
  common-net: {}