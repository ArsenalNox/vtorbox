version: '3.4'

services:

  db:
    container_name: project_db
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=my_app
      - PGPORT=5433

    ports:
      - '5433:5433'

    volumes:
      - ./postgres-data:/var/lib/postgresql/data

    networks:
      - common-net


    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=my_app
      - POSTGRES_HOST=project_db
      - PGPORT=5433

      - environment=dev
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=3600
      - Y_GEOCODER_KEY=37e2fe65-4dd4-40c5-9c4d-9a45a9f3587a
      - Y_COURIER_KEY=bd9ebf6a-e31b-438f-b3cd-fe64e42b0ff9
      - BOT_TOKEN=2021564446:AAGaXDz7oa__Ijrm5stoybJdB8R6jbJQE4o

      - SCHEDULER_HOST=project_scheduler
      - SCHEDULER_PORT=8081

    container_name: project_backend

    depends_on:
      db:
        condition: service_healthy

    restart: always

    build:
      context: .
      dockerfile: dockerfile

    ports:
      - "8000:8000"

    networks:
      - common-net

    mem_limit: 6GB

  bot:
    build:
      context: .
      dockerfile: bot/.dockerfile

    restart: always

    container_name: aiogram_bot
    command: sh -c "python3 -m bot.start_bot"
    env_file:
      - .env

    networks:
      - common-net

  scheduler:
    build:
      context: .
      dockerfile: scheduler/.dockerfile

    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=my_app
      - POSTGRES_HOST=project_db
      - PGPORT=5433

    depends_on:
      - web

    container_name: project_scheduler
    command: sh -c "python3 scheduler/main.py"
    env_file:
      - .env

    networks:
      - common-net



networks:
  common-net: {}
